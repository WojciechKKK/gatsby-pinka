{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/common/BackButton.js","webpack://gatsby-starter-default/./src/components/duplicator/TextFromUser/TextFromUser.js","webpack://gatsby-starter-default/./src/components/duplicator/TextForUser/TextForUser.js","webpack://gatsby-starter-default/./src/components/duplicator/Buttons/Buttons.js","webpack://gatsby-starter-default/./src/components/duplicator/DuplicateItems/DuplicateItems.js","webpack://gatsby-starter-default/./src/components/duplicator/Duplicator.js","webpack://gatsby-starter-default/./src/pages/duplicator.js"],"names":["StyledButton","styled","Link","to","disabled","valueFromUser","setValueFromUser","textDuplicates","translations","className","value","onChange","e","currentTarget","placeholder","valueForUser","textWithoutDuplicates","fnClickRemove","fnClickReset","fnClickShowWindowDuplicate","itemsDuplicate","showBtnDuplicate","fnClickCopy","valShowWindowDuplicate","switchValue","setSwitchValue","removeDuplicates","reset","showRemoved","onClick","elements","fnCloseElement","showWindowDuplicate","useState","fontSizeList","setFontSizeList","styleElementsList","fontSize","map","el","key","style","setValueForUser","setItemsDuplicate","setShowBtnDuplicate","setShowWindowDuplicate","completeText","id","BackButton","alert","finalItemsArr","duplicateItemsArr","split","trim","filter","forEach","includes","push"],"mappings":"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","file":"component---src-pages-duplicator-js-fa26ba3fc9b150a0b2ef.js","sourcesContent":["import * as React from \"react\";\r\nimport { Link } from 'gatsby';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButton = styled(Link)`\r\n    background: rgb(27, 38, 44);\r\n    color: rgb(222, 222, 222);\r\n    border-radius: 5px;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    position: fixed;\r\n    bottom: 10px;\r\n    padding: 5px 15px; \r\n\r\n    &:hover {\r\n        color: rgb(232, 93, 117);\r\n    }\r\n`\r\n\r\nconst BackButton = () => {\r\n    return <StyledButton to=\"/\">Back</StyledButton>\r\n};\r\n\r\nexport default BackButton","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport translations from '../data/translations.json';\r\n\r\nconst TextFromUser = ({ disabled, valueFromUser, setValueFromUser}) => {\r\n    const { textDuplicates } = translations.header;\r\n    \r\n    return(\r\n        <div className=\"duplicator-beforeTranslate\">\r\n            <textarea \r\n                disabled={disabled}\r\n                className={!disabled ? 'activeBox': ''}\r\n                value={valueFromUser} \r\n                onChange={(e) => setValueFromUser(e.currentTarget.value)}\r\n                placeholder={textDuplicates} \r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nTextFromUser.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    valueFromUser: PropTypes.string.isRequired,\r\n    setValueFromUser: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TextFromUser","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport translations from '../data/translations.json'\r\n\r\nconst TextForUser = ({ disabled, valueForUser}) => {\r\n    const { textWithoutDuplicates } = translations.header;\r\n    \r\n    return(\r\n        <div className=\"duplicator-afterTranslate\">\r\n            <textarea \r\n                className={!disabled ? 'activeBox' : ''}\r\n                disabled={disabled}\r\n                value={valueForUser} \r\n                placeholder={textWithoutDuplicates}\r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nTextForUser.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    valueForUser: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array,\r\n    ])\r\n}\r\n\r\nexport default TextForUser","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Buttons.scss'\r\nimport translations from '../data/translations.json'\r\n\r\nconst Buttons = ({  fnClickRemove, fnClickReset, itemsDuplicate, fnClickShowWindowDuplicate, fnClickCopy, valueForUser, showBtnDuplicate, valShowWindowDuplicate, switchValue, setSwitchValue}) => {\r\n    const { removeDuplicates, reset, showRemoved } = translations.buttons;\r\n    const showPopup = () => {\r\n        fnClickShowWindowDuplicate(!valShowWindowDuplicate)\r\n    }\r\n\r\n    return(\r\n        <div className=\"duplicator-buttons\">\r\n            {\r\n                showBtnDuplicate \r\n                ? (\r\n                    <button \r\n                        className=\"btn-show\" \r\n                        onClick={showPopup}>\r\n                        {showRemoved}\r\n                        {/* <a className=\"btn-show__item\">{itemsDuplicate.length}</a> */}\r\n                    </button>\r\n                )\r\n                : (\r\n                    <button className=\"btn-send\" onClick={fnClickRemove}>\r\n                        {removeDuplicates}\r\n                    </button>\r\n                )\r\n            }\r\n            <button className=\"btn-reset\" onClick={fnClickReset}>\r\n                {reset}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nButtons.propTypes = {\r\n    showBtnDuplicate: PropTypes.bool.isRequired,\r\n    itemsDuplicate: PropTypes.array.isRequired,\r\n    fnClickRemove: PropTypes.func.isRequired,\r\n    fnClickReset: PropTypes.func.isRequired,\r\n    fnClickShowWindowDuplicate: PropTypes.func.isRequired,\r\n    valShowWindowDuplicate: PropTypes.bool.isRequired,\r\n    switchValue: PropTypes.bool.isRequired,\r\n    setSwitchValue: PropTypes.func.isRequired,\r\n    valueForUser: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array,\r\n    ])\r\n}\r\n\r\nexport default Buttons","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './DuplicateItems.scss'\r\n\r\nconst DuplicateItems = ({elements, fnCloseElement, showWindowDuplicate}) => {\r\n    const [ fontSizeList, setFontSizeList ] = useState(1);\r\n \r\n    const zoomIn = () => {\r\n        if(fontSizeList < 3){\r\n            setFontSizeList(fontSizeList + 0.5);\r\n        }\r\n    }\r\n    const zoomOut = () => {\r\n        if(fontSizeList > 0.5){\r\n            setFontSizeList(fontSizeList - 0.5);\r\n        }\r\n    }\r\n    const styleElementsList = {\r\n        fontSize: `${fontSizeList}rem`\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                showWindowDuplicate\r\n                ? (\r\n                    <div className=\"duplicator-displayItems\">\r\n                        <button className=\"btn-close\" onClick={() => fnCloseElement(false)}>close</button>\r\n                        <div className=\"displayItems-zoom\">\r\n                            <button onClick={zoomOut}>-</button>\r\n                            <button onClick={zoomIn}>+</button>\r\n                        </div>\r\n                        <ul className=\"displayItems-list\">\r\n                            {elements.map((el,key) => {\r\n                                return <li key={key} style={styleElementsList}>{el}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n                : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nDuplicateItems.propTypes = {\r\n    elements: PropTypes.array.isRequired,\r\n    fnCloseElement: PropTypes.func.isRequired,\r\n    showWindowDuplicate: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default DuplicateItems","import React, { useState } from 'react';\r\nimport translations from './data/translations.json';\r\nimport TextFromUser from './TextFromUser/TextFromUser';\r\nimport TextForUser from './TextForUser/TextForUser';\r\nimport Buttons from './Buttons/Buttons';\r\nimport DuplicateItems from './DuplicateItems/DuplicateItems';\r\nimport './Duplicator.scss'\r\nimport BackButton from '../common/BackButton';\r\n\r\nconst Duplicator = () => {\r\n    const [ valueFromUser, setValueFromUser ] = useState('');\r\n    const [ valueForUser, setValueForUser] = useState();\r\n    const [ itemsDuplicate, setItemsDuplicate] = useState([]);\r\n    const [ showBtnDuplicate, setShowBtnDuplicate] = useState(false)\r\n    const [ showWindowDuplicate, setShowWindowDuplicate ] = useState(false)\r\n    const [ switchValue , setSwitchValue] = useState(false)\r\n\r\n    const { completeText } = translations.header;\r\n\r\n    const removeDuplicate = () => {\r\n        if(!valueFromUser){ \r\n            return alert(completeText)\r\n        }\r\n\r\n        const finalItemsArr = [];\r\n        const duplicateItemsArr = []\r\n        const removeWhiteSpace = valueFromUser.split(',').map(el => el.trim());\r\n        const removeEmptyString = removeWhiteSpace.filter(el => el);\r\n\r\n        removeEmptyString.forEach(el => {\r\n            finalItemsArr.includes(el)\r\n            ? duplicateItemsArr.push(el) \r\n            : finalItemsArr.push(el)\r\n        });\r\n\r\n        setShowBtnDuplicate(!showBtnDuplicate)\r\n        setItemsDuplicate(duplicateItemsArr)\r\n        setValueForUser(finalItemsArr);\r\n    }\r\n\r\n    const resetDuplicate = () => {\r\n        setShowBtnDuplicate(false)\r\n        setValueFromUser('');\r\n        setValueForUser('');\r\n    }\r\n\r\n    return(\r\n        <div id=\"duplicator\" className={switchValue ? 'darkMode' : 'normalMode'}>\r\n            <BackButton />\r\n            <TextFromUser disabled={showBtnDuplicate} valueFromUser={valueFromUser} setValueFromUser={setValueFromUser} />\r\n            <Buttons \r\n                itemsDuplicate={itemsDuplicate}\r\n                fnClickShowWindowDuplicate={setShowWindowDuplicate}\r\n                valShowWindowDuplicate={showWindowDuplicate}\r\n                showBtnDuplicate={showBtnDuplicate}\r\n                fnClickRemove={removeDuplicate} \r\n                fnClickReset={resetDuplicate}\r\n                switchValue={switchValue}\r\n                setSwitchValue={setSwitchValue}\r\n                valueForUser={valueForUser}\r\n            />\r\n            <TextForUser disabled={!showBtnDuplicate} valueForUser={valueForUser} />\r\n            <DuplicateItems elements={itemsDuplicate} showWindowDuplicate={showWindowDuplicate} fnCloseElement={setShowWindowDuplicate} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Duplicator","import React from 'react'\r\nimport Duplicator from '../components/duplicator/Duplicator';\r\n\r\nconst DuplicatorPage = () => {\r\n    return <Duplicator />\r\n};\r\n\r\nexport default DuplicatorPage;"],"sourceRoot":""}