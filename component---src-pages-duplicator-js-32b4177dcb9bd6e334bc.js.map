{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/duplicator/TextFromUser/TextFromUser.js","webpack://gatsby-starter-default/./src/components/duplicator/TextForUser/TextForUser.js","webpack://gatsby-starter-default/./src/components/duplicator/Buttons/Buttons.js","webpack://gatsby-starter-default/./src/components/duplicator/DuplicateItems/DuplicateItems.js","webpack://gatsby-starter-default/./src/components/duplicator/Duplicator.js","webpack://gatsby-starter-default/./src/pages/duplicator.js"],"names":["disabled","valueFromUser","setValueFromUser","textDuplicates","translations","className","value","onChange","e","currentTarget","placeholder","valueForUser","textWithoutDuplicates","fnClickRemove","fnClickReset","itemsDuplicate","fnClickShowWindowDuplicate","fnClickCopy","showBtnDuplicate","valShowWindowDuplicate","switchValue","setSwitchValue","removeDuplicates","reset","showRemoved","copyText","Button","variant","onClick","length","startIcon","Autorenew","CopyToClipboard","text","color","Save","Delete","elements","fnCloseElement","showWindowDuplicate","useState","fontSizeList","setFontSizeList","styleElementsList","fontSize","map","el","key","style","setValueForUser","setItemsDuplicate","setShowBtnDuplicate","setShowWindowDuplicate","completeText","id","BackButton","alert","finalItemsArr","duplicateItemsArr","split","trim","filter","forEach","includes","push"],"mappings":"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","file":"component---src-pages-duplicator-js-32b4177dcb9bd6e334bc.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport translations from '../data/translations.json';\r\n\r\nconst TextFromUser = ({ disabled, valueFromUser, setValueFromUser}) => {\r\n    const { textDuplicates } = translations.header;\r\n    \r\n    return(\r\n        <div className=\"duplicator-beforeTranslate\">\r\n            <textarea \r\n                disabled={disabled}\r\n                className={!disabled ? 'activeBox': ''}\r\n                value={valueFromUser} \r\n                onChange={(e) => setValueFromUser(e.currentTarget.value)}\r\n                placeholder={textDuplicates} \r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nTextFromUser.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    valueFromUser: PropTypes.string.isRequired,\r\n    setValueFromUser: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TextFromUser","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport translations from '../data/translations.json'\r\n\r\nconst TextForUser = ({ disabled, valueForUser}) => {\r\n    const { textWithoutDuplicates } = translations.header;\r\n    \r\n    return(\r\n        <div className=\"duplicator-afterTranslate\">\r\n            <textarea \r\n                className={!disabled ? 'activeBox' : ''}\r\n                disabled={disabled}\r\n                value={valueForUser} \r\n                placeholder={textWithoutDuplicates}\r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nTextForUser.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    valueForUser: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array,\r\n    ])\r\n}\r\n\r\nexport default TextForUser","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Buttons.scss'\r\nimport translations from '../data/translations.json';\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\n\r\nconst Buttons = ({  fnClickRemove, fnClickReset, itemsDuplicate, fnClickShowWindowDuplicate, fnClickCopy, valueForUser, showBtnDuplicate, valShowWindowDuplicate, switchValue, setSwitchValue}) => {\r\n    const { removeDuplicates, reset, showRemoved, copyText } = translations.buttons;\r\n    const showPopup = () => {\r\n        fnClickShowWindowDuplicate(!valShowWindowDuplicate)\r\n    }\r\n\r\n    return(\r\n        <div className=\"duplicator-buttons\">\r\n            {\r\n                showBtnDuplicate \r\n                ? (\r\n                    <Button variant=\"outlined\" onClick={showPopup}>\r\n                        {showRemoved}\r\n                        <a className=\"btn-show__item\">{itemsDuplicate.length}</a>\r\n                    </Button>\r\n                )\r\n                : (\r\n                    <Button variant=\"contained\" onClick={fnClickRemove} startIcon={<AutorenewIcon />}>\r\n                        {removeDuplicates}\r\n                    </Button>\r\n                )\r\n            }\r\n\r\n            <CopyToClipboard text={valueForUser}>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<SaveIcon />}>\r\n                    {copyText}\r\n                </Button>\r\n            </CopyToClipboard>\r\n\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={fnClickReset} startIcon={<DeleteIcon />}>\r\n                {reset}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\nButtons.propTypes = {\r\n    showBtnDuplicate: PropTypes.bool.isRequired,\r\n    itemsDuplicate: PropTypes.array.isRequired,\r\n    fnClickRemove: PropTypes.func.isRequired,\r\n    fnClickReset: PropTypes.func.isRequired,\r\n    fnClickShowWindowDuplicate: PropTypes.func.isRequired,\r\n    valShowWindowDuplicate: PropTypes.bool.isRequired,\r\n    switchValue: PropTypes.bool.isRequired,\r\n    setSwitchValue: PropTypes.func.isRequired,\r\n    valueForUser: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array,\r\n    ])\r\n}\r\n\r\nexport default Buttons","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './DuplicateItems.scss'\r\n\r\nconst DuplicateItems = ({elements, fnCloseElement, showWindowDuplicate}) => {\r\n    const [ fontSizeList, setFontSizeList ] = useState(1);\r\n \r\n    const zoomIn = () => {\r\n        if(fontSizeList < 3){\r\n            setFontSizeList(fontSizeList + 0.5);\r\n        }\r\n    }\r\n    const zoomOut = () => {\r\n        if(fontSizeList > 0.5){\r\n            setFontSizeList(fontSizeList - 0.5);\r\n        }\r\n    }\r\n    const styleElementsList = {\r\n        fontSize: `${fontSizeList}rem`\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                showWindowDuplicate\r\n                ? (\r\n                    <div className=\"duplicator-displayItems\">\r\n                        <button className=\"btn-close\" onClick={() => fnCloseElement(false)}>close</button>\r\n                        <div className=\"displayItems-zoom\">\r\n                            <button onClick={zoomOut}>-</button>\r\n                            <button onClick={zoomIn}>+</button>\r\n                        </div>\r\n                        <ul className=\"displayItems-list\">\r\n                            {elements.map((el,key) => {\r\n                                return <li key={key} style={styleElementsList}>{el}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n                : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nDuplicateItems.propTypes = {\r\n    elements: PropTypes.array.isRequired,\r\n    fnCloseElement: PropTypes.func.isRequired,\r\n    showWindowDuplicate: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default DuplicateItems","import React, { useState } from 'react';\r\nimport translations from './data/translations.json';\r\nimport TextFromUser from './TextFromUser/TextFromUser';\r\nimport TextForUser from './TextForUser/TextForUser';\r\nimport Buttons from './Buttons/Buttons';\r\nimport DuplicateItems from './DuplicateItems/DuplicateItems';\r\nimport './Duplicator.scss'\r\nimport BackButton from '../common/BackButton';\r\n\r\nconst Duplicator = () => {\r\n    const [ valueFromUser, setValueFromUser ] = useState('');\r\n    const [ valueForUser, setValueForUser] = useState();\r\n    const [ itemsDuplicate, setItemsDuplicate] = useState([]);\r\n    const [ showBtnDuplicate, setShowBtnDuplicate] = useState(false)\r\n    const [ showWindowDuplicate, setShowWindowDuplicate ] = useState(false)\r\n    const [ switchValue , setSwitchValue] = useState(false)\r\n\r\n    const { completeText } = translations.header;\r\n\r\n    const removeDuplicate = () => {\r\n        if(!valueFromUser){ \r\n            return alert(completeText)\r\n        }\r\n\r\n        const finalItemsArr = [];\r\n        const duplicateItemsArr = []\r\n        const removeWhiteSpace = valueFromUser.split(',').map(el => el.trim());\r\n        const removeEmptyString = removeWhiteSpace.filter(el => el);\r\n\r\n        removeEmptyString.forEach(el => {\r\n            finalItemsArr.includes(el)\r\n            ? duplicateItemsArr.push(el) \r\n            : finalItemsArr.push(el)\r\n        });\r\n\r\n        setShowBtnDuplicate(!showBtnDuplicate)\r\n        setItemsDuplicate(duplicateItemsArr)\r\n        setValueForUser(finalItemsArr);\r\n    }\r\n\r\n    const resetDuplicate = () => {\r\n        setShowBtnDuplicate(false)\r\n        setValueFromUser('');\r\n        setValueForUser('');\r\n    }\r\n\r\n    return(\r\n        <div id=\"duplicator\" className={switchValue ? 'darkMode' : 'normalMode'}>\r\n            <BackButton />\r\n            <TextFromUser disabled={showBtnDuplicate} valueFromUser={valueFromUser} setValueFromUser={setValueFromUser} />\r\n            <Buttons \r\n                itemsDuplicate={itemsDuplicate}\r\n                fnClickShowWindowDuplicate={setShowWindowDuplicate}\r\n                valShowWindowDuplicate={showWindowDuplicate}\r\n                showBtnDuplicate={showBtnDuplicate}\r\n                fnClickRemove={removeDuplicate} \r\n                fnClickReset={resetDuplicate}\r\n                switchValue={switchValue}\r\n                setSwitchValue={setSwitchValue}\r\n                valueForUser={valueForUser}\r\n            />\r\n            <TextForUser disabled={!showBtnDuplicate} valueForUser={valueForUser} />\r\n            <DuplicateItems elements={itemsDuplicate} showWindowDuplicate={showWindowDuplicate} fnCloseElement={setShowWindowDuplicate} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Duplicator","import React from 'react'\r\nimport Duplicator from '../components/duplicator/Duplicator';\r\n\r\nconst DuplicatorPage = () => {\r\n    return <Duplicator />\r\n};\r\n\r\nexport default DuplicatorPage;"],"sourceRoot":""}